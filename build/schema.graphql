
  type NewAuctionScma @entity {
  id: ID!
  index:BigInt!
  addressPaymentToken:Bytes!
  NFTID:BigInt!
   creator: Bytes!
   addressNFTCollection:Bytes!
            currentBidOwner: Bytes!
            currentBidPrice:BigInt! 
            BuyNowprice:BigInt!
            endAuction: BigInt!
            bidCount: BigInt!
            sold:Boolean!
    bider: [Bid!]! @derivedFrom(field: "newAuction")
     nftdata: [NFT!]! @derivedFrom(field: "auction")
  user:[User!]! @derivedFrom(field: "Newuser")
# user:User!
status:Boolean!
}
  

type Bid @entity{
    id: ID!
  askPrice: BigInt!
  tokenId:BigInt!
  newAuction:NewAuctionScma!
    bidowner:Bytes!
  }

  type Collection @entity {
  "ID (address)"
  id: ID!

  "Name"
  name: String!

  "Symbol"
  symbol: String!

  "Is active"
  active: Boolean!

  "Total of Trades"
  totalTrades: BigInt!

  "Total volume of collection traded (in BNB)"
  totalVolumeBNB: BigDecimal!

  "Number tokens listed"
  numberTokensListed: BigInt!

  "List of NFTs"
  # nfts: NFT!
  # tradingFee: BigDecimal!

  # creatorFee: BigDecimal!
  # whitelistChecker: Bytes!
  nfts: NFT!
  "Day history"
  dayData: [CollectionDayData!]! @derivedFrom(field: "collection")
}

type CollectionDayData @entity {
  id: ID!

  "Start date (timestamp)"
  date: Int!

  "Collection"
  collection: Collection!

  "Daily volume (in BNB)"
  dailyVolumeBNB: BigDecimal!

  "Daily unique trades"
  dailyTrades: BigInt!
}


type NFT @entity{
  id: ID!
  # collection:Collection!
  collection: [Collection!]! @derivedFrom(field: "nfts")
  auction: NewAuctionScma!
  tokenId:BigInt!
  url:String
  updatedAt: BigInt!
  currentAskPrice: BigDecimal!
  currentSeller: String!
  latestTradedPriceInBNB: BigDecimal!
  tradeVolumeBNB: BigDecimal!
  totalTrades: BigInt!
  transactionHistory: [Transaction!]! @derivedFrom(field: "nft")
  isTradable: Boolean!
  }


type Mint  @entity{
  id:ID!
  tokenId:BigInt!
  mintaddress:Bytes!
  url:String!
}


type Transaction @entity {
  id: ID!

  block: BigInt!
  timestamp: BigInt!

  "Collection"
  collection: Collection!
  nft: NFT!

  "Ask Price (in BNB)"
  askPrice: BigDecimal!

  "Net price to seller (in BNB)"
  netPrice: BigDecimal!

  "Buyer"
  buyer: User!

  "Seller"
  seller: User!

  "Whether the buyer used BNB"
  withBNB: Boolean!
}

type User @entity {
  "User address"
  id: ID!

  "Number of tokens currently listed"
  numberTokensListed: BigInt!

  "Number of tokens purchased"
  numberTokensPurchased: BigInt!

  "Number of tokens sold"
  numberTokensSold: BigInt!

  "Volume of tokens purchased (in BNB)"
  totalVolumeInBNBTokensPurchased: BigDecimal!

  "Volume of tokens sold (in BNB)"
  totalVolumeInBNBTokensSold: BigDecimal!

  "Total fees collected (in BNB)" # For creator/treasury addresses
  totalFeesCollectedInBNB: BigDecimal!

  "Transactions buy"
  buyTradeHistory: [Transaction!]! @derivedFrom(field: "buyer")

  "Transactions sold"
  sellTradeHistory: [Transaction!]! @derivedFrom(field: "seller")

  "Ask order history"
  Newuser: NewAuctionScma!
  #  auctiona:[NewAuctionScma!]! @derivedFrom(field: "user")
  "Average price of tokens purchased (in BNB)"
  averageTokenPriceInBNBPurchased: BigDecimal!

  "Average price of tokens sold (in BNB)"
  averageTokenPriceInBNBSold: BigDecimal!
}