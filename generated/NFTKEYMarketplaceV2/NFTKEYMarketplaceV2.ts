// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EndTimeUpdate extends ethereum.Event {
  get params(): EndTimeUpdate__Params {
    return new EndTimeUpdate__Params(this);
  }
}

export class EndTimeUpdate__Params {
  _event: EndTimeUpdate;

  constructor(event: EndTimeUpdate) {
    this._event = event;
  }

  get erc721Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewCategoryAdded extends ethereum.Event {
  get params(): NewCategoryAdded__Params {
    return new NewCategoryAdded__Params(this);
  }
}

export class NewCategoryAdded__Params {
  _event: NewCategoryAdded;

  constructor(event: NewCategoryAdded) {
    this._event = event;
  }

  get categoryId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _categoryName(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Priceupdate extends ethereum.Event {
  get params(): Priceupdate__Params {
    return new Priceupdate__Params(this);
  }
}

export class Priceupdate__Params {
  _event: Priceupdate;

  constructor(event: Priceupdate) {
    this._event = event;
  }

  get erc721Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get Price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SetRoyalty extends ethereum.Event {
  get params(): SetRoyalty__Params {
    return new SetRoyalty__Params(this);
  }
}

export class SetRoyalty__Params {
  _event: SetRoyalty;

  constructor(event: SetRoyalty) {
    this._event = event;
  }

  get erc721Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get feeFraction(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenBidAccepted extends ethereum.Event {
  get params(): TokenBidAccepted__Params {
    return new TokenBidAccepted__Params(this);
  }
}

export class TokenBidAccepted__Params {
  _event: TokenBidAccepted;

  constructor(event: TokenBidAccepted) {
    this._event = event;
  }

  get erc721Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get bid(): TokenBidAcceptedBidStruct {
    return changetype<TokenBidAcceptedBidStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }

  get serviceFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get royaltyFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class TokenBidAcceptedBidStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class TokenBidEntered extends ethereum.Event {
  get params(): TokenBidEntered__Params {
    return new TokenBidEntered__Params(this);
  }
}

export class TokenBidEntered__Params {
  _event: TokenBidEntered;

  constructor(event: TokenBidEntered) {
    this._event = event;
  }

  get erc721Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bid(): TokenBidEnteredBidStruct {
    return changetype<TokenBidEnteredBidStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get newbid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TokenBidEnteredBidStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class TokenBidWithdrawn extends ethereum.Event {
  get params(): TokenBidWithdrawn__Params {
    return new TokenBidWithdrawn__Params(this);
  }
}

export class TokenBidWithdrawn__Params {
  _event: TokenBidWithdrawn;

  constructor(event: TokenBidWithdrawn) {
    this._event = event;
  }

  get erc721Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bid(): TokenBidWithdrawnBidStruct {
    return changetype<TokenBidWithdrawnBidStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class TokenBidWithdrawnBidStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class TokenBought extends ethereum.Event {
  get params(): TokenBought__Params {
    return new TokenBought__Params(this);
  }
}

export class TokenBought__Params {
  _event: TokenBought;

  constructor(event: TokenBought) {
    this._event = event;
  }

  get erc721Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get listing(): TokenBoughtListingStruct {
    return changetype<TokenBoughtListingStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }

  get serviceFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get royaltyFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class TokenBoughtListingStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get seller(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get category(): BigInt {
    return this[4].toBigInt();
  }
}

export class TokenDelisted extends ethereum.Event {
  get params(): TokenDelisted__Params {
    return new TokenDelisted__Params(this);
  }
}

export class TokenDelisted__Params {
  _event: TokenDelisted;

  constructor(event: TokenDelisted) {
    this._event = event;
  }

  get erc721Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get listing(): TokenDelistedListingStruct {
    return changetype<TokenDelistedListingStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class TokenDelistedListingStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get seller(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get category(): BigInt {
    return this[4].toBigInt();
  }
}

export class TokenListed extends ethereum.Event {
  get params(): TokenListed__Params {
    return new TokenListed__Params(this);
  }
}

export class TokenListed__Params {
  _event: TokenListed;

  constructor(event: TokenListed) {
    this._event = event;
  }

  get erc721Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get listing(): TokenListedListingStruct {
    return changetype<TokenListedListingStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get isAuction(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class TokenListedListingStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get seller(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get category(): BigInt {
    return this[4].toBigInt();
  }
}

export class NFTKEYMarketplaceV2__getBidderBidsResultBidderBidsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class NFTKEYMarketplaceV2__getBidderTokenBidResultValidBidStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class NFTKEYMarketplaceV2__getTokenBidsResultBidsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class NFTKEYMarketplaceV2__getTokenHighestBidResultHighestBidStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class NFTKEYMarketplaceV2__getTokenHighestBidsResultHighestBidsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class NFTKEYMarketplaceV2__getTokenListingResultValidListingStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get seller(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get category(): BigInt {
    return this[4].toBigInt();
  }
}

export class NFTKEYMarketplaceV2__getTokenListingsResultListingsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get seller(): Address {
    return this[2].toAddress();
  }

  get expireTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get category(): BigInt {
    return this[4].toBigInt();
  }
}

export class NFTKEYMarketplaceV2__royaltyResultValue0Struct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get feeFraction(): BigInt {
    return this[1].toBigInt();
  }

  get setBy(): Address {
    return this[2].toAddress();
  }
}

export class NFTKEYMarketplaceV2 extends ethereum.SmartContract {
  static bind(address: Address): NFTKEYMarketplaceV2 {
    return new NFTKEYMarketplaceV2("NFTKEYMarketplaceV2", address);
  }

  CheckListed(erc721Address: Address, tokenId: BigInt): boolean {
    let result = super.call(
      "CheckListed",
      "CheckListed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_CheckListed(
    erc721Address: Address,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "CheckListed",
      "CheckListed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  actionTimeOutRangeMax(): BigInt {
    let result = super.call(
      "actionTimeOutRangeMax",
      "actionTimeOutRangeMax():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_actionTimeOutRangeMax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "actionTimeOutRangeMax",
      "actionTimeOutRangeMax():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  actionTimeOutRangeMin(): BigInt {
    let result = super.call(
      "actionTimeOutRangeMin",
      "actionTimeOutRangeMin():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_actionTimeOutRangeMin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "actionTimeOutRangeMin",
      "actionTimeOutRangeMin():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  categories(param0: BigInt): string {
    let result = super.call("categories", "categories(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_categories(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("categories", "categories(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  categoryLength(): BigInt {
    let result = super.call("categoryLength", "categoryLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_categoryLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "categoryLength",
      "categoryLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultRoyaltyFraction(): BigInt {
    let result = super.call(
      "defaultRoyaltyFraction",
      "defaultRoyaltyFraction():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultRoyaltyFraction(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultRoyaltyFraction",
      "defaultRoyaltyFraction():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBidderBids(
    erc721Address: Address,
    bidder: Address,
    from: BigInt,
    size: BigInt
  ): Array<NFTKEYMarketplaceV2__getBidderBidsResultBidderBidsStruct> {
    let result = super.call(
      "getBidderBids",
      "getBidderBids(address,address,uint256,uint256):((uint256,uint256,address,uint256)[])",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromAddress(bidder),
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );

    return result[0].toTupleArray<
      NFTKEYMarketplaceV2__getBidderBidsResultBidderBidsStruct
    >();
  }

  try_getBidderBids(
    erc721Address: Address,
    bidder: Address,
    from: BigInt,
    size: BigInt
  ): ethereum.CallResult<
    Array<NFTKEYMarketplaceV2__getBidderBidsResultBidderBidsStruct>
  > {
    let result = super.tryCall(
      "getBidderBids",
      "getBidderBids(address,address,uint256,uint256):((uint256,uint256,address,uint256)[])",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromAddress(bidder),
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        NFTKEYMarketplaceV2__getBidderBidsResultBidderBidsStruct
      >()
    );
  }

  getBidderTokenBid(
    erc721Address: Address,
    tokenId: BigInt,
    bidder: Address
  ): NFTKEYMarketplaceV2__getBidderTokenBidResultValidBidStruct {
    let result = super.call(
      "getBidderTokenBid",
      "getBidderTokenBid(address,uint256,address):((uint256,uint256,address,uint256))",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(bidder)
      ]
    );

    return changetype<
      NFTKEYMarketplaceV2__getBidderTokenBidResultValidBidStruct
    >(result[0].toTuple());
  }

  try_getBidderTokenBid(
    erc721Address: Address,
    tokenId: BigInt,
    bidder: Address
  ): ethereum.CallResult<
    NFTKEYMarketplaceV2__getBidderTokenBidResultValidBidStruct
  > {
    let result = super.tryCall(
      "getBidderTokenBid",
      "getBidderTokenBid(address,uint256,address):((uint256,uint256,address,uint256))",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(bidder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NFTKEYMarketplaceV2__getBidderTokenBidResultValidBidStruct>(
        value[0].toTuple()
      )
    );
  }

  getTokenBids(
    erc721Address: Address,
    tokenId: BigInt
  ): Array<NFTKEYMarketplaceV2__getTokenBidsResultBidsStruct> {
    let result = super.call(
      "getTokenBids",
      "getTokenBids(address,uint256):((uint256,uint256,address,uint256)[])",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toTupleArray<
      NFTKEYMarketplaceV2__getTokenBidsResultBidsStruct
    >();
  }

  try_getTokenBids(
    erc721Address: Address,
    tokenId: BigInt
  ): ethereum.CallResult<
    Array<NFTKEYMarketplaceV2__getTokenBidsResultBidsStruct>
  > {
    let result = super.tryCall(
      "getTokenBids",
      "getTokenBids(address,uint256):((uint256,uint256,address,uint256)[])",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<NFTKEYMarketplaceV2__getTokenBidsResultBidsStruct>()
    );
  }

  getTokenHighestBid(
    erc721Address: Address,
    tokenId: BigInt
  ): NFTKEYMarketplaceV2__getTokenHighestBidResultHighestBidStruct {
    let result = super.call(
      "getTokenHighestBid",
      "getTokenHighestBid(address,uint256):((uint256,uint256,address,uint256))",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<
      NFTKEYMarketplaceV2__getTokenHighestBidResultHighestBidStruct
    >(result[0].toTuple());
  }

  try_getTokenHighestBid(
    erc721Address: Address,
    tokenId: BigInt
  ): ethereum.CallResult<
    NFTKEYMarketplaceV2__getTokenHighestBidResultHighestBidStruct
  > {
    let result = super.tryCall(
      "getTokenHighestBid",
      "getTokenHighestBid(address,uint256):((uint256,uint256,address,uint256))",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NFTKEYMarketplaceV2__getTokenHighestBidResultHighestBidStruct>(
        value[0].toTuple()
      )
    );
  }

  getTokenHighestBids(
    erc721Address: Address,
    from: BigInt,
    size: BigInt
  ): Array<NFTKEYMarketplaceV2__getTokenHighestBidsResultHighestBidsStruct> {
    let result = super.call(
      "getTokenHighestBids",
      "getTokenHighestBids(address,uint256,uint256):((uint256,uint256,address,uint256)[])",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );

    return result[0].toTupleArray<
      NFTKEYMarketplaceV2__getTokenHighestBidsResultHighestBidsStruct
    >();
  }

  try_getTokenHighestBids(
    erc721Address: Address,
    from: BigInt,
    size: BigInt
  ): ethereum.CallResult<
    Array<NFTKEYMarketplaceV2__getTokenHighestBidsResultHighestBidsStruct>
  > {
    let result = super.tryCall(
      "getTokenHighestBids",
      "getTokenHighestBids(address,uint256,uint256):((uint256,uint256,address,uint256)[])",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        NFTKEYMarketplaceV2__getTokenHighestBidsResultHighestBidsStruct
      >()
    );
  }

  getTokenListing(
    erc721Address: Address,
    tokenId: BigInt
  ): NFTKEYMarketplaceV2__getTokenListingResultValidListingStruct {
    let result = super.call(
      "getTokenListing",
      "getTokenListing(address,uint256):((uint256,uint256,address,uint256,uint256))",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<
      NFTKEYMarketplaceV2__getTokenListingResultValidListingStruct
    >(result[0].toTuple());
  }

  try_getTokenListing(
    erc721Address: Address,
    tokenId: BigInt
  ): ethereum.CallResult<
    NFTKEYMarketplaceV2__getTokenListingResultValidListingStruct
  > {
    let result = super.tryCall(
      "getTokenListing",
      "getTokenListing(address,uint256):((uint256,uint256,address,uint256,uint256))",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NFTKEYMarketplaceV2__getTokenListingResultValidListingStruct>(
        value[0].toTuple()
      )
    );
  }

  getTokenListings(
    erc721Address: Address,
    from: BigInt,
    size: BigInt
  ): Array<NFTKEYMarketplaceV2__getTokenListingsResultListingsStruct> {
    let result = super.call(
      "getTokenListings",
      "getTokenListings(address,uint256,uint256):((uint256,uint256,address,uint256,uint256)[])",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );

    return result[0].toTupleArray<
      NFTKEYMarketplaceV2__getTokenListingsResultListingsStruct
    >();
  }

  try_getTokenListings(
    erc721Address: Address,
    from: BigInt,
    size: BigInt
  ): ethereum.CallResult<
    Array<NFTKEYMarketplaceV2__getTokenListingsResultListingsStruct>
  > {
    let result = super.tryCall(
      "getTokenListings",
      "getTokenListings(address,uint256,uint256):((uint256,uint256,address,uint256,uint256)[])",
      [
        ethereum.Value.fromAddress(erc721Address),
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        NFTKEYMarketplaceV2__getTokenListingsResultListingsStruct
      >()
    );
  }

  isTradingEnabled(): boolean {
    let result = super.call(
      "isTradingEnabled",
      "isTradingEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isTradingEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTradingEnabled",
      "isTradingEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  numTokenListings(erc721Address: Address): BigInt {
    let result = super.call(
      "numTokenListings",
      "numTokenListings(address):(uint256)",
      [ethereum.Value.fromAddress(erc721Address)]
    );

    return result[0].toBigInt();
  }

  try_numTokenListings(erc721Address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numTokenListings",
      "numTokenListings(address):(uint256)",
      [ethereum.Value.fromAddress(erc721Address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numTokenWithBids(erc721Address: Address): BigInt {
    let result = super.call(
      "numTokenWithBids",
      "numTokenWithBids(address):(uint256)",
      [ethereum.Value.fromAddress(erc721Address)]
    );

    return result[0].toBigInt();
  }

  try_numTokenWithBids(erc721Address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numTokenWithBids",
      "numTokenWithBids(address):(uint256)",
      [ethereum.Value.fromAddress(erc721Address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentToken(): Address {
    let result = super.call("paymentToken", "paymentToken():(address)", []);

    return result[0].toAddress();
  }

  try_paymentToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("paymentToken", "paymentToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royalty(
    erc721Address: Address
  ): NFTKEYMarketplaceV2__royaltyResultValue0Struct {
    let result = super.call(
      "royalty",
      "royalty(address):((address,uint256,address))",
      [ethereum.Value.fromAddress(erc721Address)]
    );

    return changetype<NFTKEYMarketplaceV2__royaltyResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_royalty(
    erc721Address: Address
  ): ethereum.CallResult<NFTKEYMarketplaceV2__royaltyResultValue0Struct> {
    let result = super.tryCall(
      "royalty",
      "royalty(address):((address,uint256,address))",
      [ethereum.Value.fromAddress(erc721Address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NFTKEYMarketplaceV2__royaltyResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  royaltyUpperLimit(): BigInt {
    let result = super.call(
      "royaltyUpperLimit",
      "royaltyUpperLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_royaltyUpperLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "royaltyUpperLimit",
      "royaltyUpperLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  serviceFee(): i32 {
    let result = super.call("serviceFee", "serviceFee():(uint8)", []);

    return result[0].toI32();
  }

  try_serviceFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("serviceFee", "serviceFee():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _paymentTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangepriceCall extends ethereum.Call {
  get inputs(): ChangepriceCall__Inputs {
    return new ChangepriceCall__Inputs(this);
  }

  get outputs(): ChangepriceCall__Outputs {
    return new ChangepriceCall__Outputs(this);
  }
}

export class ChangepriceCall__Inputs {
  _call: ChangepriceCall;

  constructor(call: ChangepriceCall) {
    this._call = call;
  }

  get erc721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangepriceCall__Outputs {
  _call: ChangepriceCall;

  constructor(call: ChangepriceCall) {
    this._call = call;
  }
}

export class UpdateEndTimeForAuctionCall extends ethereum.Call {
  get inputs(): UpdateEndTimeForAuctionCall__Inputs {
    return new UpdateEndTimeForAuctionCall__Inputs(this);
  }

  get outputs(): UpdateEndTimeForAuctionCall__Outputs {
    return new UpdateEndTimeForAuctionCall__Outputs(this);
  }
}

export class UpdateEndTimeForAuctionCall__Inputs {
  _call: UpdateEndTimeForAuctionCall;

  constructor(call: UpdateEndTimeForAuctionCall) {
    this._call = call;
  }

  get erc721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expireTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateEndTimeForAuctionCall__Outputs {
  _call: UpdateEndTimeForAuctionCall;

  constructor(call: UpdateEndTimeForAuctionCall) {
    this._call = call;
  }
}

export class AcceptBidForTokenCall extends ethereum.Call {
  get inputs(): AcceptBidForTokenCall__Inputs {
    return new AcceptBidForTokenCall__Inputs(this);
  }

  get outputs(): AcceptBidForTokenCall__Outputs {
    return new AcceptBidForTokenCall__Outputs(this);
  }
}

export class AcceptBidForTokenCall__Inputs {
  _call: AcceptBidForTokenCall;

  constructor(call: AcceptBidForTokenCall) {
    this._call = call;
  }

  get erc721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bidder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AcceptBidForTokenCall__Outputs {
  _call: AcceptBidForTokenCall;

  constructor(call: AcceptBidForTokenCall) {
    this._call = call;
  }
}

export class AddNewCategoryCall extends ethereum.Call {
  get inputs(): AddNewCategoryCall__Inputs {
    return new AddNewCategoryCall__Inputs(this);
  }

  get outputs(): AddNewCategoryCall__Outputs {
    return new AddNewCategoryCall__Outputs(this);
  }
}

export class AddNewCategoryCall__Inputs {
  _call: AddNewCategoryCall;

  constructor(call: AddNewCategoryCall) {
    this._call = call;
  }

  get _categoryName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddNewCategoryCall__Outputs {
  _call: AddNewCategoryCall;

  constructor(call: AddNewCategoryCall) {
    this._call = call;
  }
}

export class BuyTokenCall extends ethereum.Call {
  get inputs(): BuyTokenCall__Inputs {
    return new BuyTokenCall__Inputs(this);
  }

  get outputs(): BuyTokenCall__Outputs {
    return new BuyTokenCall__Outputs(this);
  }
}

export class BuyTokenCall__Inputs {
  _call: BuyTokenCall;

  constructor(call: BuyTokenCall) {
    this._call = call;
  }

  get erc721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyTokenCall__Outputs {
  _call: BuyTokenCall;

  constructor(call: BuyTokenCall) {
    this._call = call;
  }
}

export class ChangeMarketplaceStatusCall extends ethereum.Call {
  get inputs(): ChangeMarketplaceStatusCall__Inputs {
    return new ChangeMarketplaceStatusCall__Inputs(this);
  }

  get outputs(): ChangeMarketplaceStatusCall__Outputs {
    return new ChangeMarketplaceStatusCall__Outputs(this);
  }
}

export class ChangeMarketplaceStatusCall__Inputs {
  _call: ChangeMarketplaceStatusCall;

  constructor(call: ChangeMarketplaceStatusCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ChangeMarketplaceStatusCall__Outputs {
  _call: ChangeMarketplaceStatusCall;

  constructor(call: ChangeMarketplaceStatusCall) {
    this._call = call;
  }
}

export class ChangeMaxActionTimeLimitCall extends ethereum.Call {
  get inputs(): ChangeMaxActionTimeLimitCall__Inputs {
    return new ChangeMaxActionTimeLimitCall__Inputs(this);
  }

  get outputs(): ChangeMaxActionTimeLimitCall__Outputs {
    return new ChangeMaxActionTimeLimitCall__Outputs(this);
  }
}

export class ChangeMaxActionTimeLimitCall__Inputs {
  _call: ChangeMaxActionTimeLimitCall;

  constructor(call: ChangeMaxActionTimeLimitCall) {
    this._call = call;
  }

  get timeInSec(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMaxActionTimeLimitCall__Outputs {
  _call: ChangeMaxActionTimeLimitCall;

  constructor(call: ChangeMaxActionTimeLimitCall) {
    this._call = call;
  }
}

export class ChangeMinActionTimeLimitCall extends ethereum.Call {
  get inputs(): ChangeMinActionTimeLimitCall__Inputs {
    return new ChangeMinActionTimeLimitCall__Inputs(this);
  }

  get outputs(): ChangeMinActionTimeLimitCall__Outputs {
    return new ChangeMinActionTimeLimitCall__Outputs(this);
  }
}

export class ChangeMinActionTimeLimitCall__Inputs {
  _call: ChangeMinActionTimeLimitCall;

  constructor(call: ChangeMinActionTimeLimitCall) {
    this._call = call;
  }

  get timeInSec(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMinActionTimeLimitCall__Outputs {
  _call: ChangeMinActionTimeLimitCall;

  constructor(call: ChangeMinActionTimeLimitCall) {
    this._call = call;
  }
}

export class ChangeSeriveFeeCall extends ethereum.Call {
  get inputs(): ChangeSeriveFeeCall__Inputs {
    return new ChangeSeriveFeeCall__Inputs(this);
  }

  get outputs(): ChangeSeriveFeeCall__Outputs {
    return new ChangeSeriveFeeCall__Outputs(this);
  }
}

export class ChangeSeriveFeeCall__Inputs {
  _call: ChangeSeriveFeeCall;

  constructor(call: ChangeSeriveFeeCall) {
    this._call = call;
  }

  get serviceFeeFraction_(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ChangeSeriveFeeCall__Outputs {
  _call: ChangeSeriveFeeCall;

  constructor(call: ChangeSeriveFeeCall) {
    this._call = call;
  }
}

export class DelistTokenCall extends ethereum.Call {
  get inputs(): DelistTokenCall__Inputs {
    return new DelistTokenCall__Inputs(this);
  }

  get outputs(): DelistTokenCall__Outputs {
    return new DelistTokenCall__Outputs(this);
  }
}

export class DelistTokenCall__Inputs {
  _call: DelistTokenCall;

  constructor(call: DelistTokenCall) {
    this._call = call;
  }

  get erc721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DelistTokenCall__Outputs {
  _call: DelistTokenCall;

  constructor(call: DelistTokenCall) {
    this._call = call;
  }
}

export class EnterBidForTokenCall extends ethereum.Call {
  get inputs(): EnterBidForTokenCall__Inputs {
    return new EnterBidForTokenCall__Inputs(this);
  }

  get outputs(): EnterBidForTokenCall__Outputs {
    return new EnterBidForTokenCall__Outputs(this);
  }
}

export class EnterBidForTokenCall__Inputs {
  _call: EnterBidForTokenCall;

  constructor(call: EnterBidForTokenCall) {
    this._call = call;
  }

  get erc721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expireTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class EnterBidForTokenCall__Outputs {
  _call: EnterBidForTokenCall;

  constructor(call: EnterBidForTokenCall) {
    this._call = call;
  }
}

export class ListTokenCall extends ethereum.Call {
  get inputs(): ListTokenCall__Inputs {
    return new ListTokenCall__Inputs(this);
  }

  get outputs(): ListTokenCall__Outputs {
    return new ListTokenCall__Outputs(this);
  }
}

export class ListTokenCall__Inputs {
  _call: ListTokenCall;

  constructor(call: ListTokenCall) {
    this._call = call;
  }

  get erc721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expireTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get isauction(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _category(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ListTokenCall__Outputs {
  _call: ListTokenCall;

  constructor(call: ListTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRoyaltyCall extends ethereum.Call {
  get inputs(): SetRoyaltyCall__Inputs {
    return new SetRoyaltyCall__Inputs(this);
  }

  get outputs(): SetRoyaltyCall__Outputs {
    return new SetRoyaltyCall__Outputs(this);
  }
}

export class SetRoyaltyCall__Inputs {
  _call: SetRoyaltyCall;

  constructor(call: SetRoyaltyCall) {
    this._call = call;
  }

  get erc721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get feeFraction(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetRoyaltyCall__Outputs {
  _call: SetRoyaltyCall;

  constructor(call: SetRoyaltyCall) {
    this._call = call;
  }
}

export class SetRoyaltyForCollectionCall extends ethereum.Call {
  get inputs(): SetRoyaltyForCollectionCall__Inputs {
    return new SetRoyaltyForCollectionCall__Inputs(this);
  }

  get outputs(): SetRoyaltyForCollectionCall__Outputs {
    return new SetRoyaltyForCollectionCall__Outputs(this);
  }
}

export class SetRoyaltyForCollectionCall__Inputs {
  _call: SetRoyaltyForCollectionCall;

  constructor(call: SetRoyaltyForCollectionCall) {
    this._call = call;
  }

  get erc721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get feeFraction(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetRoyaltyForCollectionCall__Outputs {
  _call: SetRoyaltyForCollectionCall;

  constructor(call: SetRoyaltyForCollectionCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateRoyaltyUpperLimitCall extends ethereum.Call {
  get inputs(): UpdateRoyaltyUpperLimitCall__Inputs {
    return new UpdateRoyaltyUpperLimitCall__Inputs(this);
  }

  get outputs(): UpdateRoyaltyUpperLimitCall__Outputs {
    return new UpdateRoyaltyUpperLimitCall__Outputs(this);
  }
}

export class UpdateRoyaltyUpperLimitCall__Inputs {
  _call: UpdateRoyaltyUpperLimitCall;

  constructor(call: UpdateRoyaltyUpperLimitCall) {
    this._call = call;
  }

  get _newUpperLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateRoyaltyUpperLimitCall__Outputs {
  _call: UpdateRoyaltyUpperLimitCall;

  constructor(call: UpdateRoyaltyUpperLimitCall) {
    this._call = call;
  }
}

export class WithdrawBidForTokenCall extends ethereum.Call {
  get inputs(): WithdrawBidForTokenCall__Inputs {
    return new WithdrawBidForTokenCall__Inputs(this);
  }

  get outputs(): WithdrawBidForTokenCall__Outputs {
    return new WithdrawBidForTokenCall__Outputs(this);
  }
}

export class WithdrawBidForTokenCall__Inputs {
  _call: WithdrawBidForTokenCall;

  constructor(call: WithdrawBidForTokenCall) {
    this._call = call;
  }

  get erc721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawBidForTokenCall__Outputs {
  _call: WithdrawBidForTokenCall;

  constructor(call: WithdrawBidForTokenCall) {
    this._call = call;
  }
}
