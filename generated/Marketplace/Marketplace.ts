// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BuyPriceSell extends ethereum.Event {
  get params(): BuyPriceSell__Params {
    return new BuyPriceSell__Params(this);
  }
}

export class BuyPriceSell__Params {
  _event: BuyPriceSell;

  constructor(event: BuyPriceSell) {
    this._event = event;
  }

  get addressNFTCollection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get Pirce(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sold(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get nftId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class MintnewNFT extends ethereum.Event {
  get params(): MintnewNFT__Params {
    return new MintnewNFT__Params(this);
  }
}

export class MintnewNFT__Params {
  _event: MintnewNFT;

  constructor(event: MintnewNFT) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get mintaddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get metaUrl(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class NFTClaimed extends ethereum.Event {
  get params(): NFTClaimed__Params {
    return new NFTClaimed__Params(this);
  }
}

export class NFTClaimed__Params {
  _event: NFTClaimed;

  constructor(event: NFTClaimed) {
    this._event = event;
  }

  get addressNFTCollection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get claimedBy(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class NFTRefunded extends ethereum.Event {
  get params(): NFTRefunded__Params {
    return new NFTRefunded__Params(this);
  }
}

export class NFTRefunded__Params {
  _event: NFTRefunded;

  constructor(event: NFTRefunded) {
    this._event = event;
  }

  get addressNFTCollection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get claimedBy(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class NewAuction extends ethereum.Event {
  get params(): NewAuction__Params {
    return new NewAuction__Params(this);
  }
}

export class NewAuction__Params {
  _event: NewAuction;

  constructor(event: NewAuction) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get addressNFTCollection(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get addressPaymentToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get mintedBy(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get currentBidOwner(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get currentBidPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get BuyNowprice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get endAuction(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get bidCount(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get sold(): boolean {
    return this._event.parameters[10].value.toBoolean();
  }
}

export class NewBidOnAuction extends ethereum.Event {
  get params(): NewBidOnAuction__Params {
    return new NewBidOnAuction__Params(this);
  }
}

export class NewBidOnAuction__Params {
  _event: NewBidOnAuction;

  constructor(event: NewBidOnAuction) {
    this._event = event;
  }

  get addressNFTCollection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nftId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewCollection extends ethereum.Event {
  get params(): NewCollection__Params {
    return new NewCollection__Params(this);
  }
}

export class NewCollection__Params {
  _event: NewCollection;

  constructor(event: NewCollection) {
    this._event = event;
  }

  get CollectionNew(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Nftselltotopbidder extends ethereum.Event {
  get params(): Nftselltotopbidder__Params {
    return new Nftselltotopbidder__Params(this);
  }
}

export class Nftselltotopbidder__Params {
  _event: Nftselltotopbidder;

  constructor(event: Nftselltotopbidder) {
    this._event = event;
  }

  get addressNFTCollection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get claimedBy(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sold(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class TokensClaimed extends ethereum.Event {
  get params(): TokensClaimed__Params {
    return new TokensClaimed__Params(this);
  }
}

export class TokensClaimed__Params {
  _event: TokensClaimed;

  constructor(event: TokensClaimed) {
    this._event = event;
  }

  get addressNFTCollection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get claimedBy(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Updatebuyprice extends ethereum.Event {
  get params(): Updatebuyprice__Params {
    return new Updatebuyprice__Params(this);
  }
}

export class Updatebuyprice__Params {
  _event: Updatebuyprice;

  constructor(event: Updatebuyprice) {
    this._event = event;
  }

  get addressNFTCollection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newpirce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nftId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Marketplace extends ethereum.SmartContract {
  static bind(address: Address): Marketplace {
    return new Marketplace("Marketplace", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bid(_auctionIndex: BigInt, _newBid: BigInt): boolean {
    let result = super.call("bid", "bid(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_auctionIndex),
      ethereum.Value.fromUnsignedBigInt(_newBid)
    ]);

    return result[0].toBoolean();
  }

  try_bid(
    _auctionIndex: BigInt,
    _newBid: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("bid", "bid(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_auctionIndex),
      ethereum.Value.fromUnsignedBigInt(_newBid)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createAuction(
    _addressNFTCollection: Address,
    _addressPaymentToken: Address,
    _nftId: BigInt,
    _endAuction: BigInt,
    _Buynowprice: BigInt
  ): BigInt {
    let result = super.call(
      "createAuction",
      "createAuction(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_addressNFTCollection),
        ethereum.Value.fromAddress(_addressPaymentToken),
        ethereum.Value.fromUnsignedBigInt(_nftId),
        ethereum.Value.fromUnsignedBigInt(_endAuction),
        ethereum.Value.fromUnsignedBigInt(_Buynowprice)
      ]
    );

    return result[0].toBigInt();
  }

  try_createAuction(
    _addressNFTCollection: Address,
    _addressPaymentToken: Address,
    _nftId: BigInt,
    _endAuction: BigInt,
    _Buynowprice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAuction",
      "createAuction(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_addressNFTCollection),
        ethereum.Value.fromAddress(_addressPaymentToken),
        ethereum.Value.fromUnsignedBigInt(_nftId),
        ethereum.Value.fromUnsignedBigInt(_endAuction),
        ethereum.Value.fromUnsignedBigInt(_Buynowprice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentBid(_auctionIndex: BigInt): BigInt {
    let result = super.call(
      "getCurrentBid",
      "getCurrentBid(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_auctionIndex)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentBid(_auctionIndex: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentBid",
      "getCurrentBid(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_auctionIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentBidOwner(_auctionIndex: BigInt): Address {
    let result = super.call(
      "getCurrentBidOwner",
      "getCurrentBidOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_auctionIndex)]
    );

    return result[0].toAddress();
  }

  try_getCurrentBidOwner(_auctionIndex: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCurrentBidOwner",
      "getCurrentBidOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_auctionIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  index(): BigInt {
    let result = super.call("index", "index():(uint256)", []);

    return result[0].toBigInt();
  }

  try_index(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("index", "index():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOpen(_auctionIndex: BigInt): boolean {
    let result = super.call("isOpen", "isOpen(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_auctionIndex)
    ]);

    return result[0].toBoolean();
  }

  try_isOpen(_auctionIndex: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOpen", "isOpen(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_auctionIndex)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSelldone(_auctionIndex: BigInt): boolean {
    let result = super.call("isSelldone", "isSelldone(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_auctionIndex)
    ]);

    return result[0].toBoolean();
  }

  try_isSelldone(_auctionIndex: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSelldone", "isSelldone(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_auctionIndex)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owncreateAuction(
    _addressPaymentToken: Address,
    _nftId: BigInt,
    _endAuction: BigInt,
    _Buynowprice: BigInt
  ): BigInt {
    let result = super.call(
      "owncreateAuction",
      "owncreateAuction(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_addressPaymentToken),
        ethereum.Value.fromUnsignedBigInt(_nftId),
        ethereum.Value.fromUnsignedBigInt(_endAuction),
        ethereum.Value.fromUnsignedBigInt(_Buynowprice)
      ]
    );

    return result[0].toBigInt();
  }

  try_owncreateAuction(
    _addressPaymentToken: Address,
    _nftId: BigInt,
    _endAuction: BigInt,
    _Buynowprice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "owncreateAuction",
      "owncreateAuction(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_addressPaymentToken),
        ethereum.Value.fromUnsignedBigInt(_nftId),
        ethereum.Value.fromUnsignedBigInt(_endAuction),
        ethereum.Value.fromUnsignedBigInt(_Buynowprice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  transferNFTFrom(from: Address, to: Address, tokenId: BigInt): boolean {
    let result = super.call(
      "transferNFTFrom",
      "transferNFTFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferNFTFrom(
    from: Address,
    to: Address,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferNFTFrom",
      "transferNFTFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DirectBuyCall extends ethereum.Call {
  get inputs(): DirectBuyCall__Inputs {
    return new DirectBuyCall__Inputs(this);
  }

  get outputs(): DirectBuyCall__Outputs {
    return new DirectBuyCall__Outputs(this);
  }
}

export class DirectBuyCall__Inputs {
  _call: DirectBuyCall;

  constructor(call: DirectBuyCall) {
    this._call = call;
  }

  get _auctionIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DirectBuyCall__Outputs {
  _call: DirectBuyCall;

  constructor(call: DirectBuyCall) {
    this._call = call;
  }
}

export class SellTokenToBiderCall extends ethereum.Call {
  get inputs(): SellTokenToBiderCall__Inputs {
    return new SellTokenToBiderCall__Inputs(this);
  }

  get outputs(): SellTokenToBiderCall__Outputs {
    return new SellTokenToBiderCall__Outputs(this);
  }
}

export class SellTokenToBiderCall__Inputs {
  _call: SellTokenToBiderCall;

  constructor(call: SellTokenToBiderCall) {
    this._call = call;
  }

  get _auctionIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SellTokenToBiderCall__Outputs {
  _call: SellTokenToBiderCall;

  constructor(call: SellTokenToBiderCall) {
    this._call = call;
  }
}

export class UpdateauctionpriceCall extends ethereum.Call {
  get inputs(): UpdateauctionpriceCall__Inputs {
    return new UpdateauctionpriceCall__Inputs(this);
  }

  get outputs(): UpdateauctionpriceCall__Outputs {
    return new UpdateauctionpriceCall__Outputs(this);
  }
}

export class UpdateauctionpriceCall__Inputs {
  _call: UpdateauctionpriceCall;

  constructor(call: UpdateauctionpriceCall) {
    this._call = call;
  }

  get _auctionIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateauctionpriceCall__Outputs {
  _call: UpdateauctionpriceCall;

  constructor(call: UpdateauctionpriceCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get _auctionIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newBid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimNFTCall extends ethereum.Call {
  get inputs(): ClaimNFTCall__Inputs {
    return new ClaimNFTCall__Inputs(this);
  }

  get outputs(): ClaimNFTCall__Outputs {
    return new ClaimNFTCall__Outputs(this);
  }
}

export class ClaimNFTCall__Inputs {
  _call: ClaimNFTCall;

  constructor(call: ClaimNFTCall) {
    this._call = call;
  }

  get _auctionIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimNFTCall__Outputs {
  _call: ClaimNFTCall;

  constructor(call: ClaimNFTCall) {
    this._call = call;
  }
}

export class ClaimTokenCall extends ethereum.Call {
  get inputs(): ClaimTokenCall__Inputs {
    return new ClaimTokenCall__Inputs(this);
  }

  get outputs(): ClaimTokenCall__Outputs {
    return new ClaimTokenCall__Outputs(this);
  }
}

export class ClaimTokenCall__Inputs {
  _call: ClaimTokenCall;

  constructor(call: ClaimTokenCall) {
    this._call = call;
  }

  get _auctionIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimTokenCall__Outputs {
  _call: ClaimTokenCall;

  constructor(call: ClaimTokenCall) {
    this._call = call;
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get _addressNFTCollection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _addressPaymentToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _nftId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _endAuction(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _Buynowprice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateTokenCall extends ethereum.Call {
  get inputs(): CreateTokenCall__Inputs {
    return new CreateTokenCall__Inputs(this);
  }

  get outputs(): CreateTokenCall__Outputs {
    return new CreateTokenCall__Outputs(this);
  }
}

export class CreateTokenCall__Inputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get tokenURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateTokenCall__Outputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OwncreateAuctionCall extends ethereum.Call {
  get inputs(): OwncreateAuctionCall__Inputs {
    return new OwncreateAuctionCall__Inputs(this);
  }

  get outputs(): OwncreateAuctionCall__Outputs {
    return new OwncreateAuctionCall__Outputs(this);
  }
}

export class OwncreateAuctionCall__Inputs {
  _call: OwncreateAuctionCall;

  constructor(call: OwncreateAuctionCall) {
    this._call = call;
  }

  get _addressPaymentToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _endAuction(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _Buynowprice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class OwncreateAuctionCall__Outputs {
  _call: OwncreateAuctionCall;

  constructor(call: OwncreateAuctionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get _auctionIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferNFTFromCall extends ethereum.Call {
  get inputs(): TransferNFTFromCall__Inputs {
    return new TransferNFTFromCall__Inputs(this);
  }

  get outputs(): TransferNFTFromCall__Outputs {
    return new TransferNFTFromCall__Outputs(this);
  }
}

export class TransferNFTFromCall__Inputs {
  _call: TransferNFTFromCall;

  constructor(call: TransferNFTFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferNFTFromCall__Outputs {
  _call: TransferNFTFromCall;

  constructor(call: TransferNFTFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
